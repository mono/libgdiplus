AC_INIT(README)
AC_CANONICAL_SYSTEM
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(libgdiplus,1.1.8)

AM_MAINTAINER_MODE
AM_PROG_LIBTOOL

AC_C_BIGENDIAN

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi
if pkg-config --atleast-version 2.2.3 glib-2.0; then
	echo GLIB 2.0 installation OK
else
	AC_MSG_ERROR("Did not find Glib >= 2.2.3");
fi

default_cairo=included
AC_ARG_WITH(cairo, [  --with-cairo=included,installed],[cairo_v=$with_cairo],[cairo_v=$default_cairo])

if test $cairo_v = "included";
then
	AC_CONFIG_SUBDIRS(libpixman)
	AC_CONFIG_SUBDIRS(cairo)
	#libpixman.la already included in cairo
	#CAIRO_LIBS='$(top_builddir)/libpixman/src/libpixman.la $(top_builddir)/cairo/src/libcairo.la'
	CAIRO_LIBS='$(top_builddir)/cairo/src/libcairo.la'
	CAIRO_CFLAGS='-I$(top_builddir)/cairo/pixman/src -I$(top_srcdir)/cairo/pixman/src -I$(top_builddir)/cairo/src -I$(top_srcdir)/cairo/src'
	AC_DEFINE(USE_INCLUDED_CAIRO,1,[Use Cairo bundled in libgdiplus])
else
	if pkg-config --exact-version 0.3.0 cairo; then
		echo Cairo installation OK
	else
		AC_MSG_ERROR("Did not find Cairo == 0.3.0");
	fi

	CAIRO_LIBS="`pkg-config --libs cairo`"
	CAIRO_CFLAGS="`pkg-config --cflags cairo`"
fi

GDIPLUS_LIBS="$CAIRO_LIBS `pkg-config --libs glib-2.0 ` `freetype-config --libs`"
GDIPLUS_CFLAGS="$CAIRO_CFLAGS `pkg-config --cflags glib-2.0 ` `freetype-config --cflags`"

AC_CHECK_HEADERS(byteswap.h)

AC_MSG_CHECKING([host threading settings])
case "$host" in
	*-*-mingw*|*-*-cygwin*)
		AC_DEFINE_UNQUOTED(CYGWIN,1,[Win32])
		AC_CHECK_LIB(intl, gettext)
		;;

	*-*-*netbsd*)
		AC_DEFINE_UNQUOTED(BSDOS,1,[NetBSD])
		;;

	*-*-*freebsd*)
		AC_DEFINE_UNQUOTED(BSDOS,1,[FreeBSD])
		CFLAGS="-D_THREAD_SAFE $CFLAGS"
		;;

	*-*-*openbsd*)
		AC_DEFINE_UNQUOTED(BSDOS,1,[OpenBSD])
		CFLAGS="$CFLAGS"
		LIBS="$LIBS"
		;;

	*-*-linux*)
		AC_DEFINE_UNQUOTED(LINUX,1,[Linux])
		AC_CHECK_LIB(pthread, pthread_create)
		;;

	*-*-solaris*)
		AC_DEFINE_UNQUOTED(SOLARIS,1,[Solaris])
		AC_DEFINE_UNQUOTED(_REENTRANT,1,[For libc reentrancy])
		CFLAGS="-pthreads $CFLAGS"
		;;

	*-*-darwin*)
		AC_DEFINE_UNQUOTED(OSX,1,[OS X])
		CFLAGS="-no-cpp-precomp $CFLAGS"
		LDFLAGS="-flat_namespace -undefined suppress $LDFLAGS"
		;;

	*)
		AC_MSG_RESULT(Unrecognized host $host)
		AC_DEFINE_UNQUOTED(OTHEROS,1,[Unknown])
		;;
esac

# Apparently for BSD special handling needs to happen
# See http://archives/neohapsis.com/archives/openbsd/2001-11/2142.html
# by Miod Vallat <miod@online.fr>
AC_CACHE_CHECK(
  [if compiler recognizes -pthread],
   myapp_cv_gcc_pthread,
   ac_save_CFLAGS=$CFLAGS
   CFLAGS="$CFLAGS -pthread"
   AC_LANG_SAVE
   AC_LANG_C
   AC_TRY_LINK([#include <pthread.h>],
               [void *p = pthread_create;],
                myapp_cv_gcc_pthread=yes,
                myapp_cv_gcc_pthread=no)
   AC_LANG_RESTORE
   CFLAGS=$ac_save_CFLAGS
)
if test $myapp_cv_gcc_pthread = yes
then
   myapp_threads=""
   CFLAGS="$CFLAGS -pthread"
else
   AC_CHECK_LIB(pthread,pthread_create,myapp_threads=-lpthread,
                [AC_CHECK_LIB(c_r,pthread_create,myapp_threads=-lc_r)])
fi


# sigsetjmp is a macro on some platforms, so can't use AC_CHECK_FUNCS
AC_MSG_CHECKING(for sigsetjmp)
AC_TRY_LINK([#include <setjmp.h>], [
sigjmp_buf env;
sigsetjmp(env, 0);
], gdip_ok=yes, gdip_ok=no)
AC_MSG_RESULT($gdip_ok)
if test "$gdip_ok" = "yes"; then
  AC_DEFINE(HAVE_SIGSETJMP, 1, sigsetjmp is available)
fi

AC_CHECK_LIB(cairo, cairo_ft_font_lock_face,
	[AC_DEFINE(HAVE_CAIRO_FT_FONT_LOCK_FACE, 1, Define if cairo_ft_font_lock_face() is available)]
)

AC_ARG_WITH(libjpeg,
	[AC_HELP_STRING([--without-libjpeg], [disable JPEG file IO])])
AC_ARG_WITH(libtiff,
	[AC_HELP_STRING([--without-libtiff], [disable TIFF file IO])])
AC_ARG_WITH(libungif,
	[AC_HELP_STRING([--without-libungif], [disable GIF file IO])])
AC_ARG_WITH(libpng,
	[AC_HELP_STRING([--without-libpng], [disable PNG file IO])])

dnl Test for libtiff
  if test x$with_libtiff != xno && test -z "$LIBTIFF"; then
    AC_CHECK_LIB(tiff, TIFFReadScanline,
      [AC_CHECK_HEADER(tiffio.h,
        TIFF='tiff'; LIBTIFF='-ltiff',
        AC_MSG_WARN(*** TIFF loader will not be built (TIFF header files not found) ***))],
      [AC_CHECK_LIB(tiff, TIFFWriteScanline,
        [AC_CHECK_HEADER(tiffio.h,
          TIFF='tiff'; LIBTIFF='-ltiff -ljpeg -lz',
          AC_MSG_WARN(*** TIFF loader will not be built (TIFF header files not found) ***))],
        [AC_CHECK_LIB(tiff34, TIFFFlushData,
          [AC_CHECK_HEADER(tiffio.h,
            TIFF='tiff'; LIBTIFF='-ltiff34 -ljpeg -lz',
            AC_MSG_WARN(*** TIFF loader will not be built (TIFF header files not found) ***))],
        AC_MSG_WARN(*** TIFF plug-in will not be built (TIFF library not found) ***),  -lz -lm)], -ljpeg -lz -lm)], -lm)
  fi

if test x$TIFF != x; then
  GDIPLUS_LIBS="$GDIPLUS_LIBS $LIBTIFF"
  AC_DEFINE(HAVE_LIBTIFF, 1, Define if tiff support is available)
fi

dnl Test for libjpeg
  if test x$with_libjpeg != xno && test -z "$LIBJPEG"; then
    AC_CHECK_LIB(jpeg, jpeg_destroy_decompress,
      jpeg_ok=yes,
      jpeg_ok=no
      AC_MSG_WARN(*** JPEG loader will not be built (JPEG library not found) ***))
    if test "$jpeg_ok" = yes; then
      AC_MSG_CHECKING([for jpeglib.h])
      AC_TRY_CPP(
[#include <stdio.h>
#undef PACKAGE
#undef VERSION
#undef HAVE_STDLIB_H
#include <jpeglib.h>],
        jpeg_ok=yes,
        jpeg_ok=no)
      AC_MSG_RESULT($jpeg_ok)
      if test "$jpeg_ok" = yes; then
        JPEG='jpeg'; LIBJPEG='-ljpeg'
      else
        AC_MSG_WARN(*** JPEG loader will not be built (JPEG header file not found) ***)
      fi
    fi
  fi

if test x$JPEG != x; then
  GDIPLUS_LIBS="$GDIPLUS_LIBS $LIBJPEG"
  AC_DEFINE(HAVE_LIBJPEG, 1, Define if jpeg support is available)
fi

dnl Test for libungif
  if test x$with_libungif != xno && test -z "$LIBUNGIF"; then
    AC_CHECK_LIB(ungif, DGifOpenFileName,
      [AC_CHECK_HEADER(gif_lib.h,
        UNGIF='ungif'; LIBUNGIF='-lungif',
	AC_MSG_WARN(*** GIF loader will not be built (ungiflibrary not found) ***))],
      AC_MSG_WARN(*** GIF loader will not be built (ungiflibrary not found) ***))
  fi

if test x$UNGIF != x; then
  GDIPLUS_LIBS="$GDIPLUS_LIBS $LIBUNGIF"
  AC_DEFINE(HAVE_LIBUNGIF, 1, Define if gif support is available)
fi

dnl Test for libpng
  if test x$with_libpng != xno && test -z "$LIBPNG"; then
    AC_MSG_CHECKING(for libpng12)
    if $PKG_CONFIG --exists libpng12 ; then
        AC_MSG_RESULT(yes)
        PNG='png'
	PNG_DEP_CFLAGS_PACKAGES=libpng12
	LIBPNG=`$PKG_CONFIG --libs libpng12`
    else
      AC_MSG_RESULT(no)
      AC_CHECK_LIB(png, png_read_info,
        [AC_CHECK_HEADER(png.h,
          png_ok=yes,
          png_ok=no)],
        AC_MSG_WARN(*** PNG loader will not be built (PNG library not found) ***), -lz -lm)
      if test "$png_ok" = yes; then
        AC_MSG_CHECKING([for png_structp in png.h])
        AC_TRY_COMPILE([#include <png.h>],
          [png_structp pp; png_infop info; png_colorp cmap; png_create_read_struct;],
          png_ok=yes,
          png_ok=no)
        AC_MSG_RESULT($png_ok)
        if test "$png_ok" = yes; then
          PNG='png'; LIBPNG='-lpng -lz'
        else
          AC_MSG_WARN(*** PNG loader will not be built (PNG library is too old) ***)
        fi
      else
       AC_MSG_WARN(*** PNG loader will not be built (PNG header file not found) ***)
      fi
    fi
fi


if test x$PNG != x; then
  GDIPLUS_LIBS="$GDIPLUS_LIBS $LIBPNG"
  AC_DEFINE(HAVE_LIBPNG, 1, Define if png support is available)
fi

dnl
dnl Produce a diagnostic, to reduce support time
dnl
AC_TRY_COMPILE([#include <X11/Xlib.h>],
			 [],[x11_failed=false],[x11_failed=true])
if $x11_failed; then
   AC_ERROR("Failed to compile with X11/Xlib.h include.  You must fix your compiler paths")
fi
 
AC_SUBST(GDIPLUS_LIBS)
AC_SUBST(GDIPLUS_CFLAGS)

AC_OUTPUT([
Makefile
libgdiplus.pc
src/Makefile
tests/Makefile])

echo "---"
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * Codecs supported:"
echo ""
echo $ECHO_N "      - TIFF: "
test ! x$TIFF = x && echo yes || echo "no (Get it from http://www.libtiff.org/)"
echo $ECHO_N "      - JPEG: "
test ! x$JPEG = x && echo yes || echo "no (Get it from http://freshmeat.net/projects/libjpeg)"
echo $ECHO_N "      - GIF: "
test ! x$UNGIF = x && echo yes || echo "no (See http://sourceforge.net/projects/libungif)"
echo $ECHO_N "      - PNG: "
test ! x$PNG = x && echo yes || echo "no (See http://www.libpng.org/pub/png/libpng.html)"
echo ""
echo "      NOTE: if any of the above say 'no' you may install the"
echo "            corresponding development packages for them, rerun"
echo "            autogen.sh to include them in the build."
echo ""
echo "---"

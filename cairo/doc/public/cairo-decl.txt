<FUNCTION>
<NAME>cairo_ft_font_face_create_for_pattern</NAME>
<RETURNS>cairo_font_face_t  *</RETURNS>
FcPattern *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_ft_font_options_substitute</NAME>
<RETURNS>void</RETURNS>
const cairo_font_options_t *options,FcPattern                  *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_ft_font_face_create_for_ft_face</NAME>
<RETURNS>cairo_font_face_t  *</RETURNS>
FT_Face         face,int             load_flags
</FUNCTION>
<FUNCTION>
<NAME>cairo_ft_scaled_font_lock_face</NAME>
<RETURNS>FT_Face</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_ft_scaled_font_unlock_face</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_glitz_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
glitz_surface_t *surface
</FUNCTION>
<VARIABLE>
<NAME>cairo_path_nil</NAME>
extern cairo_path_t cairo_path_nil;
</VARIABLE>
<FUNCTION>
<NAME>cairo_pdf_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
const char   *filename,double	width_in_points,double	height_in_points
</FUNCTION>
<FUNCTION>
<NAME>cairo_pdf_surface_create_for_stream</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_write_func_t	write_func,void	       *closure,double		width_in_points,double		height_in_points
</FUNCTION>
<FUNCTION>
<NAME>cairo_pdf_surface_set_dpi</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t     *surface,double		x_dpi,double		y_dpi
</FUNCTION>
<FUNCTION>
<NAME>cairo_ps_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
const char *filename,double	     width_in_points,double	     height_in_points
</FUNCTION>
<FUNCTION>
<NAME>cairo_ps_surface_create_for_stream</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_write_func_t	write_func,void	       *closure,double		width_in_points,double		height_in_points
</FUNCTION>
<FUNCTION>
<NAME>cairo_ps_surface_set_dpi</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t      *surface,double		x_dpi,double		y_dpi
</FUNCTION>
<FUNCTION>
<NAME>cairo_quartz_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
CGContextRef    context,int	     width,int	     height
</FUNCTION>
<FUNCTION>
<NAME>cairo_win32_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
HDC hdc
</FUNCTION>
<FUNCTION>
<NAME>cairo_win32_font_face_create_for_logfontw</NAME>
<RETURNS>cairo_font_face_t  *</RETURNS>
LOGFONTW *logfont
</FUNCTION>
<FUNCTION>
<NAME>cairo_win32_scaled_font_select_font</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_scaled_font_t *scaled_font,HDC                  hdc
</FUNCTION>
<FUNCTION>
<NAME>cairo_win32_scaled_font_done_font</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_win32_scaled_font_get_metrics_factor</NAME>
<RETURNS>double</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_xcb_surface_create_with_xrender_format</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
XCBConnection	    *c,XCBDRAWABLE	     drawable,XCBRenderPICTFORMINFO *format,int		     width,int		     height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xcb_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
XCBConnection *c,XCBDRAWABLE	 drawable,XCBVISUALTYPE *visual,int		 width,int		 height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xcb_surface_create_for_bitmap</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
XCBConnection *c,XCBPIXMAP	    bitmap,int	    width,int	    height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xcb_surface_set_size</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface,int		     width,int		     height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xlib_surface_create_with_xrender_format</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
Display		 *dpy,Drawable		  drawable,Screen		 *screen,XRenderPictFormat *format,int		  width,int		  height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xlib_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
Display     *dpy,Drawable	drawable,Visual      *visual,int		width,int		height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xlib_surface_create_for_bitmap</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
Display  *dpy,Pixmap	bitmap,Screen	*screen,int	width,int	height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xlib_surface_set_size</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface,int              width,int              height
</FUNCTION>
<FUNCTION>
<NAME>cairo_xlib_surface_set_drawable</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface,Drawable	  drawable,int              width,int              height
</FUNCTION>
<MACRO>
<NAME>CAIRO_BEGIN_DECLS</NAME>
# define CAIRO_BEGIN_DECLS  extern "C" {
</MACRO>
<MACRO>
<NAME>CAIRO_END_DECLS</NAME>
# define CAIRO_END_DECLS    }
</MACRO>
<MACRO>
<NAME>CAIRO_BEGIN_DECLS</NAME>
# define CAIRO_BEGIN_DECLS
</MACRO>
<MACRO>
<NAME>CAIRO_END_DECLS</NAME>
# define CAIRO_END_DECLS
</MACRO>
<TYPEDEF>
<NAME>cairo_bool_t</NAME>
typedef int cairo_bool_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cairo_t</NAME>
typedef struct _cairo cairo_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cairo_surface_t</NAME>
typedef struct _cairo_surface cairo_surface_t;
</TYPEDEF>
<STRUCT>
<NAME>cairo_matrix_t</NAME>
typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
</STRUCT>
<TYPEDEF>
<NAME>cairo_pattern_t</NAME>
typedef struct _cairo_pattern cairo_pattern_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>cairo_destroy_func_t</NAME>
<RETURNS>void </RETURNS>
void *data
</USER_FUNCTION>
<STRUCT>
<NAME>cairo_user_data_key_t</NAME>
typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;
</STRUCT>
<ENUM>
<NAME>cairo_status_t</NAME>
typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,
    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND
} cairo_status_t;
</ENUM>
<USER_FUNCTION>
<NAME>cairo_write_func_t</NAME>
<RETURNS>cairo_status_t </RETURNS>
void		  *closure,
					      const unsigned char *data,
					      unsigned int	   length
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cairo_read_func_t</NAME>
<RETURNS>cairo_status_t </RETURNS>
void		*closure,
					     unsigned char	*data,
					     unsigned int	length
</USER_FUNCTION>
<FUNCTION>
<NAME>cairo_create</NAME>
<RETURNS>cairo_t  *</RETURNS>
cairo_surface_t *target
</FUNCTION>
<FUNCTION>
<NAME>cairo_reference</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_save</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_restore</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<ENUM>
<NAME>cairo_operator_t</NAME>
typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,

    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,

    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,

    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE
} cairo_operator_t;
</ENUM>
<FUNCTION>
<NAME>cairo_set_operator</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_operator_t op
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_source</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_pattern_t *source
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_source_rgb</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double red, double green, double blue
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_source_rgba</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double red, double green, double blue,double alpha
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_source_surface</NAME>
<RETURNS>void</RETURNS>
cairo_t	  *cr,cairo_surface_t *surface,double	   x,double	   y
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_tolerance</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double tolerance
</FUNCTION>
<ENUM>
<NAME>cairo_fill_rule_t</NAME>
typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;
</ENUM>
<FUNCTION>
<NAME>cairo_set_fill_rule</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_fill_rule_t fill_rule
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_line_width</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double width
</FUNCTION>
<ENUM>
<NAME>cairo_line_cap_t</NAME>
typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;
</ENUM>
<FUNCTION>
<NAME>cairo_set_line_cap</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_line_cap_t line_cap
</FUNCTION>
<ENUM>
<NAME>cairo_line_join_t</NAME>
typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;
</ENUM>
<FUNCTION>
<NAME>cairo_set_line_join</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_line_join_t line_join
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_dash</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *dashes, int ndash, double offset
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_miter_limit</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double limit
</FUNCTION>
<FUNCTION>
<NAME>cairo_translate</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double tx, double ty
</FUNCTION>
<FUNCTION>
<NAME>cairo_scale</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double sx, double sy
</FUNCTION>
<FUNCTION>
<NAME>cairo_rotate</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double angle
</FUNCTION>
<FUNCTION>
<NAME>cairo_transform</NAME>
<RETURNS>void</RETURNS>
cairo_t	      *cr,const cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_t	       *cr,const cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_identity_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_user_to_device</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *x, double *y
</FUNCTION>
<FUNCTION>
<NAME>cairo_user_to_device_distance</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *dx, double *dy
</FUNCTION>
<FUNCTION>
<NAME>cairo_device_to_user</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *x, double *y
</FUNCTION>
<FUNCTION>
<NAME>cairo_device_to_user_distance</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *dx, double *dy
</FUNCTION>
<FUNCTION>
<NAME>cairo_new_path</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_move_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double x, double y
</FUNCTION>
<FUNCTION>
<NAME>cairo_line_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double x, double y
</FUNCTION>
<FUNCTION>
<NAME>cairo_curve_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double x1, double y1,double x2, double y2,double x3, double y3
</FUNCTION>
<FUNCTION>
<NAME>cairo_arc</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double xc, double yc,double radius,double angle1, double angle2
</FUNCTION>
<FUNCTION>
<NAME>cairo_arc_negative</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double xc, double yc,double radius,double angle1, double angle2
</FUNCTION>
<FUNCTION>
<NAME>cairo_rel_move_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double dx, double dy
</FUNCTION>
<FUNCTION>
<NAME>cairo_rel_line_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double dx, double dy
</FUNCTION>
<FUNCTION>
<NAME>cairo_rel_curve_to</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double dx1, double dy1,double dx2, double dy2,double dx3, double dy3
</FUNCTION>
<FUNCTION>
<NAME>cairo_rectangle</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double x, double y,double width, double height
</FUNCTION>
<FUNCTION>
<NAME>cairo_close_path</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_paint</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_paint_with_alpha</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double   alpha
</FUNCTION>
<FUNCTION>
<NAME>cairo_mask</NAME>
<RETURNS>void</RETURNS>
cairo_t         *cr,cairo_pattern_t *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_mask_surface</NAME>
<RETURNS>void</RETURNS>
cairo_t         *cr,cairo_surface_t *surface,double           surface_x,double           surface_y
</FUNCTION>
<FUNCTION>
<NAME>cairo_stroke</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_stroke_preserve</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_fill</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_fill_preserve</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_copy_page</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_show_page</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_in_stroke</NAME>
<RETURNS>cairo_bool_t</RETURNS>
cairo_t *cr, double x, double y
</FUNCTION>
<FUNCTION>
<NAME>cairo_in_fill</NAME>
<RETURNS>cairo_bool_t</RETURNS>
cairo_t *cr, double x, double y
</FUNCTION>
<FUNCTION>
<NAME>cairo_stroke_extents</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double *x1, double *y1,double *x2, double *y2
</FUNCTION>
<FUNCTION>
<NAME>cairo_fill_extents</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,double *x1, double *y1,double *x2, double *y2
</FUNCTION>
<FUNCTION>
<NAME>cairo_reset_clip</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_clip</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_clip_preserve</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr
</FUNCTION>
<TYPEDEF>
<NAME>cairo_scaled_font_t</NAME>
typedef struct _cairo_scaled_font cairo_scaled_font_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cairo_font_face_t</NAME>
typedef struct _cairo_font_face cairo_font_face_t;
</TYPEDEF>
<STRUCT>
<NAME>cairo_glyph_t</NAME>
typedef struct {
  unsigned long        index;
  double               x;
  double               y;
} cairo_glyph_t;
</STRUCT>
<STRUCT>
<NAME>cairo_text_extents_t</NAME>
typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;
</STRUCT>
<STRUCT>
<NAME>cairo_font_extents_t</NAME>
typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;
</STRUCT>
<ENUM>
<NAME>cairo_font_slant_t</NAME>
typedef enum _cairo_font_slant {
  CAIRO_FONT_SLANT_NORMAL,
  CAIRO_FONT_SLANT_ITALIC,
  CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;
</ENUM>
<ENUM>
<NAME>cairo_font_weight_t</NAME>
typedef enum _cairo_font_weight {
  CAIRO_FONT_WEIGHT_NORMAL,
  CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;
</ENUM>
<ENUM>
<NAME>cairo_antialias_t</NAME>
typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,
    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL
} cairo_antialias_t;
</ENUM>
<ENUM>
<NAME>cairo_subpixel_order_t</NAME>
typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;
</ENUM>
<ENUM>
<NAME>cairo_hint_style_t</NAME>
typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
</ENUM>
<ENUM>
<NAME>cairo_hint_metrics_t</NAME>
typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;
</ENUM>
<TYPEDEF>
<NAME>cairo_font_options_t</NAME>
typedef struct _cairo_font_options cairo_font_options_t;
</TYPEDEF>
<FUNCTION>
<NAME>cairo_font_options_create</NAME>
<RETURNS>cairo_font_options_t  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_copy</NAME>
<RETURNS>cairo_font_options_t  *</RETURNS>
const cairo_font_options_t *original
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_merge</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t       *options,const cairo_font_options_t *other
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_equal</NAME>
<RETURNS>cairo_bool_t</RETURNS>
const cairo_font_options_t *options,const cairo_font_options_t *other
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_hash</NAME>
<RETURNS>unsigned long</RETURNS>
const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_set_antialias</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t *options,cairo_antialias_t     antialias
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_get_antialias</NAME>
<RETURNS>cairo_antialias_t</RETURNS>
const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_set_subpixel_order</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t   *options,cairo_subpixel_order_t  subpixel_order
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_get_subpixel_order</NAME>
<RETURNS>cairo_subpixel_order_t</RETURNS>
const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_set_hint_style</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t *options,cairo_hint_style_t     hint_style
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_get_hint_style</NAME>
<RETURNS>cairo_hint_style_t</RETURNS>
const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_set_hint_metrics</NAME>
<RETURNS>void</RETURNS>
cairo_font_options_t *options,cairo_hint_metrics_t  hint_metrics
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_options_get_hint_metrics</NAME>
<RETURNS>cairo_hint_metrics_t</RETURNS>
const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_select_font_face</NAME>
<RETURNS>void</RETURNS>
cairo_t              *cr,const char           *family,cairo_font_slant_t   slant,cairo_font_weight_t  weight
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_font_size</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double size
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_font_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_t		    *cr,const cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_font_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr,cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_font_options</NAME>
<RETURNS>void</RETURNS>
cairo_t                    *cr,const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_font_options</NAME>
<RETURNS>void</RETURNS>
cairo_t              *cr,cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_show_text</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, const char *utf8
</FUNCTION>
<FUNCTION>
<NAME>cairo_show_glyphs</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_glyph_t *glyphs, int num_glyphs
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_font_face</NAME>
<RETURNS>cairo_font_face_t  *</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_extents</NAME>
<RETURNS>void</RETURNS>
cairo_t              *cr,cairo_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>cairo_set_font_face</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>cairo_text_extents</NAME>
<RETURNS>void</RETURNS>
cairo_t              *cr,const char    	 *utf8,cairo_text_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>cairo_glyph_extents</NAME>
<RETURNS>void</RETURNS>
cairo_t               *cr,cairo_glyph_t         *glyphs,int                   num_glyphs,cairo_text_extents_t  *extents
</FUNCTION>
<FUNCTION>
<NAME>cairo_text_path</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, const char *utf8
</FUNCTION>
<FUNCTION>
<NAME>cairo_glyph_path</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_glyph_t *glyphs, int num_glyphs
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_face_reference</NAME>
<RETURNS>void</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_face_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_face_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_font_face_t *font_face
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_face_get_user_data</NAME>
<RETURNS>void  *</RETURNS>
cairo_font_face_t	   *font_face,const cairo_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>cairo_font_face_set_user_data</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_font_face_t	   *font_face,const cairo_user_data_key_t *key,void			   *user_data,cairo_destroy_func_t	    destroy
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_create</NAME>
<RETURNS>cairo_scaled_font_t  *</RETURNS>
cairo_font_face_t          *font_face,const cairo_matrix_t       *font_matrix,const cairo_matrix_t       *ctm,const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_reference</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_scaled_font_t *scaled_font
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_extents</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t  *scaled_font,cairo_font_extents_t *extents
</FUNCTION>
<FUNCTION>
<NAME>cairo_scaled_font_glyph_extents</NAME>
<RETURNS>void</RETURNS>
cairo_scaled_font_t   *scaled_font,cairo_glyph_t         *glyphs,int                   num_glyphs,cairo_text_extents_t  *extents
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_operator</NAME>
<RETURNS>cairo_operator_t</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_source</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_tolerance</NAME>
<RETURNS>double</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_current_point</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, double *x, double *y
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_fill_rule</NAME>
<RETURNS>cairo_fill_rule_t</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_line_width</NAME>
<RETURNS>double</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_line_cap</NAME>
<RETURNS>cairo_line_cap_t</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_line_join</NAME>
<RETURNS>cairo_line_join_t</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_miter_limit</NAME>
<RETURNS>double</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_t *cr, cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_get_target</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_t *cr
</FUNCTION>
<ENUM>
<NAME>cairo_path_data_type_t</NAME>
typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;
</ENUM>
<STRUCT>
<NAME>cairo_path_t</NAME>
typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;
</STRUCT>
<FUNCTION>
<NAME>cairo_copy_path</NAME>
<RETURNS>cairo_path_t  *</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_copy_path_flat</NAME>
<RETURNS>cairo_path_t  *</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_append_path</NAME>
<RETURNS>void</RETURNS>
cairo_t	*cr,cairo_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>cairo_path_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_path_t *path
</FUNCTION>
<FUNCTION>
<NAME>cairo_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_t *cr
</FUNCTION>
<FUNCTION>
<NAME>cairo_status_to_string</NAME>
<RETURNS>const char  *</RETURNS>
cairo_status_t status
</FUNCTION>
<ENUM>
<NAME>cairo_content_t</NAME>
typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR		= 0x1000,
    CAIRO_CONTENT_ALPHA		= 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA	= 0x3000
} cairo_content_t;
</ENUM>
<MACRO>
<NAME>CAIRO_CONTENT_VALID</NAME>
#define CAIRO_CONTENT_VALID(content) ((content) && 			         \
				      (((content) & ~(CAIRO_CONTENT_COLOR |      \
						      CAIRO_CONTENT_ALPHA |      \
						      CAIRO_CONTENT_COLOR_ALPHA))\
				       == 0))
</MACRO>
<FUNCTION>
<NAME>cairo_surface_create_similar</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_surface_t  *other,cairo_content_t	content,int		width,int		height
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_reference</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_finish</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_write_to_png</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_surface_t	*surface,const char		*filename
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_write_to_png_stream</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_surface_t	*surface,cairo_write_func_t	write_func,void			*closure
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_get_user_data</NAME>
<RETURNS>void  *</RETURNS>
cairo_surface_t		 *surface,const cairo_user_data_key_t *key
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_set_user_data</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_surface_t		 *surface,const cairo_user_data_key_t *key,void			 *user_data,cairo_destroy_func_t	 destroy
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_get_font_options</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t      *surface,cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>cairo_surface_set_device_offset</NAME>
<RETURNS>void</RETURNS>
cairo_surface_t *surface,double           x_offset,double           y_offset
</FUNCTION>
<ENUM>
<NAME>cairo_format_t</NAME>
typedef enum _cairo_format {
    CAIRO_FORMAT_ARGB32,
    CAIRO_FORMAT_RGB24,
    CAIRO_FORMAT_A8,
    CAIRO_FORMAT_A1
} cairo_format_t;
</ENUM>
<MACRO>
<NAME>CAIRO_FORMAT_VALID</NAME>
#define CAIRO_FORMAT_VALID(format) ((format) >= CAIRO_FORMAT_ARGB32 && \
				    (format) <= CAIRO_FORMAT_A1)
</MACRO>
<FUNCTION>
<NAME>cairo_image_surface_create</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_format_t	format,int			width,int			height
</FUNCTION>
<FUNCTION>
<NAME>cairo_image_surface_create_for_data</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
unsigned char	       *data,cairo_format_t		format,int			width,int			height,int			stride
</FUNCTION>
<FUNCTION>
<NAME>cairo_image_surface_get_width</NAME>
<RETURNS>int</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_image_surface_get_height</NAME>
<RETURNS>int</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_image_surface_create_from_png</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
const char	*filename
</FUNCTION>
<FUNCTION>
<NAME>cairo_image_surface_create_from_png_stream</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
cairo_read_func_t	read_func,void		*closure
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_create_rgb</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
double red, double green, double blue
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_create_rgba</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
double red, double green, double blue,double alpha
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_create_for_surface</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_create_linear</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
double x0, double y0,double x1, double y1
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_create_radial</NAME>
<RETURNS>cairo_pattern_t  *</RETURNS>
double cx0, double cy0, double radius0,double cx1, double cy1, double radius1
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_reference</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_destroy</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_status</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_pattern_t *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_add_color_stop_rgb</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern,double offset,double red, double green, double blue
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_add_color_stop_rgba</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern,double offset,double red, double green, double blue,double alpha
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_set_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t      *pattern,const cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_get_matrix</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern,cairo_matrix_t  *matrix
</FUNCTION>
<ENUM>
<NAME>cairo_extend_t</NAME>
typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT
} cairo_extend_t;
</ENUM>
<FUNCTION>
<NAME>cairo_pattern_set_extend</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern, cairo_extend_t extend
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_get_extend</NAME>
<RETURNS>cairo_extend_t</RETURNS>
cairo_pattern_t *pattern
</FUNCTION>
<ENUM>
<NAME>cairo_filter_t</NAME>
typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;
</ENUM>
<FUNCTION>
<NAME>cairo_pattern_set_filter</NAME>
<RETURNS>void</RETURNS>
cairo_pattern_t *pattern, cairo_filter_t filter
</FUNCTION>
<FUNCTION>
<NAME>cairo_pattern_get_filter</NAME>
<RETURNS>cairo_filter_t</RETURNS>
cairo_pattern_t *pattern
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_init</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix,double  xx, double  yx,double  xy, double  yy,double  x0, double  y0
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_init_identity</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_init_translate</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix,double tx, double ty
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_init_scale</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix,double sx, double sy
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_init_rotate</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix,double radians
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_translate</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix, double tx, double ty
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_scale</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix, double sx, double sy
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_rotate</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t *matrix, double radians
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_invert</NAME>
<RETURNS>cairo_status_t</RETURNS>
cairo_matrix_t *matrix
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_multiply</NAME>
<RETURNS>void</RETURNS>
cairo_matrix_t	    *result,const cairo_matrix_t *a,const cairo_matrix_t *b
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_transform_distance</NAME>
<RETURNS>void</RETURNS>
const cairo_matrix_t *matrix,double *dx, double *dy
</FUNCTION>
<FUNCTION>
<NAME>cairo_matrix_transform_point</NAME>
<RETURNS>void</RETURNS>
const cairo_matrix_t *matrix,double *x, double *y
</FUNCTION>
<MACRO>
<NAME>cairo_current_font_extents</NAME>
#define cairo_current_font_extents   cairo_current_font_extents_REPLACED_BY_cairo_font_extents
</MACRO>
<MACRO>
<NAME>cairo_get_font_extents</NAME>
#define cairo_get_font_extents       cairo_get_font_extents_REPLACED_BY_cairo_font_extents
</MACRO>
<MACRO>
<NAME>cairo_current_operator</NAME>
#define cairo_current_operator       cairo_current_operator_REPLACED_BY_cairo_get_operator
</MACRO>
<MACRO>
<NAME>cairo_current_tolerance</NAME>
#define cairo_current_tolerance	     cairo_current_tolerance_REPLACED_BY_cairo_get_tolerance
</MACRO>
<MACRO>
<NAME>cairo_current_point</NAME>
#define cairo_current_point	     cairo_current_point_REPLACED_BY_cairo_get_current_point
</MACRO>
<MACRO>
<NAME>cairo_current_fill_rule</NAME>
#define cairo_current_fill_rule	     cairo_current_fill_rule_REPLACED_BY_cairo_get_fill_rule
</MACRO>
<MACRO>
<NAME>cairo_current_line_width</NAME>
#define cairo_current_line_width     cairo_current_line_width_REPLACED_BY_cairo_get_line_width
</MACRO>
<MACRO>
<NAME>cairo_current_line_cap</NAME>
#define cairo_current_line_cap       cairo_current_line_cap_REPLACED_BY_cairo_get_line_cap
</MACRO>
<MACRO>
<NAME>cairo_current_line_join</NAME>
#define cairo_current_line_join      cairo_current_line_join_REPLACED_BY_cairo_get_line_join
</MACRO>
<MACRO>
<NAME>cairo_current_miter_limit</NAME>
#define cairo_current_miter_limit    cairo_current_miter_limit_REPLACED_BY_cairo_get_miter_limit
</MACRO>
<MACRO>
<NAME>cairo_current_matrix</NAME>
#define cairo_current_matrix         cairo_current_matrix_REPLACED_BY_cairo_get_matrix
</MACRO>
<MACRO>
<NAME>cairo_current_target_surface</NAME>
#define cairo_current_target_surface cairo_current_target_surface_REPLACED_BY_cairo_get_target
</MACRO>
<MACRO>
<NAME>cairo_get_status</NAME>
#define cairo_get_status             cairo_get_status_REPLACED_BY_cairo_status
</MACRO>
<MACRO>
<NAME>cairo_concat_matrix</NAME>
#define cairo_concat_matrix		 cairo_concat_matrix_REPLACED_BY_cairo_transform
</MACRO>
<MACRO>
<NAME>cairo_scale_font</NAME>
#define cairo_scale_font                 cairo_scale_font_REPLACED_BY_cairo_set_font_size
</MACRO>
<MACRO>
<NAME>cairo_select_font</NAME>
#define cairo_select_font                cairo_select_font_REPLACED_BY_cairo_select_font_face
</MACRO>
<MACRO>
<NAME>cairo_transform_font</NAME>
#define cairo_transform_font             cairo_transform_font_REPLACED_BY_cairo_set_font_matrix
</MACRO>
<MACRO>
<NAME>cairo_transform_point</NAME>
#define cairo_transform_point		 cairo_transform_point_REPLACED_BY_cairo_user_to_device
</MACRO>
<MACRO>
<NAME>cairo_transform_distance</NAME>
#define cairo_transform_distance	 cairo_transform_distance_REPLACED_BY_cairo_user_to_device_distance
</MACRO>
<MACRO>
<NAME>cairo_inverse_transform_point</NAME>
#define cairo_inverse_transform_point	 cairo_inverse_transform_point_REPLACED_BY_cairo_device_to_user
</MACRO>
<MACRO>
<NAME>cairo_inverse_transform_distance</NAME>
#define cairo_inverse_transform_distance cairo_inverse_transform_distance_REPLACED_BY_cairo_device_to_user_distance
</MACRO>
<MACRO>
<NAME>cairo_init_clip</NAME>
#define cairo_init_clip			 cairo_init_clip_REPLACED_BY_cairo_reset_clip
</MACRO>
<MACRO>
<NAME>cairo_surface_create_for_image</NAME>
#define cairo_surface_create_for_image	 cairo_surface_create_for_image_REPLACED_BY_cairo_image_surface_create_for_data
</MACRO>
<MACRO>
<NAME>cairo_default_matrix</NAME>
#define cairo_default_matrix		 cairo_default_matrix_REPLACED_BY_cairo_identity_matrix
</MACRO>
<MACRO>
<NAME>cairo_matrix_set_affine</NAME>
#define cairo_matrix_set_affine		 cairo_matrix_set_affine_REPLACED_BY_cairo_matrix_init
</MACRO>
<MACRO>
<NAME>cairo_matrix_set_identity</NAME>
#define cairo_matrix_set_identity	 cairo_matrix_set_identity_REPLACED_BY_cairo_matrix_init_identity
</MACRO>
<MACRO>
<NAME>cairo_pattern_add_color_stop</NAME>
#define cairo_pattern_add_color_stop	 cairo_pattern_add_color_stop_REPLACED_BY_cairo_pattern_add_color_stop_rgba
</MACRO>
<MACRO>
<NAME>cairo_set_rgb_color</NAME>
#define cairo_set_rgb_color		 cairo_set_rgb_color_REPLACED_BY_cairo_set_source_rgb
</MACRO>
<MACRO>
<NAME>cairo_set_pattern</NAME>
#define cairo_set_pattern		 cairo_set_pattern_REPLACED_BY_cairo_set_source
</MACRO>
<MACRO>
<NAME>cairo_xlib_surface_create_for_pixmap_with_visual</NAME>
#define cairo_xlib_surface_create_for_pixmap_with_visual	cairo_xlib_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xlib_surface_create
</MACRO>
<MACRO>
<NAME>cairo_xlib_surface_create_for_window_with_visual</NAME>
#define cairo_xlib_surface_create_for_window_with_visual	cairo_xlib_surface_create_for_window_with_visual_REPLACED_BY_cairo_xlib_surface_create
</MACRO>
<MACRO>
<NAME>cairo_xcb_surface_create_for_pixmap_with_visual</NAME>
#define cairo_xcb_surface_create_for_pixmap_with_visual	cairo_xcb_surface_create_for_pixmap_with_visual_REPLACED_BY_cairo_xcb_surface_create
</MACRO>
<MACRO>
<NAME>cairo_xcb_surface_create_for_window_with_visual</NAME>
#define cairo_xcb_surface_create_for_window_with_visual	cairo_xcb_surface_create_for_window_with_visual_REPLACED_BY_cairo_xcb_surface_create
</MACRO>
<MACRO>
<NAME>cairo_current_path</NAME>
#define cairo_current_path	     cairo_current_path_DEPRECATED_BY_cairo_copy_path
</MACRO>
<MACRO>
<NAME>cairo_current_path_flat</NAME>
#define cairo_current_path_flat	     cairo_current_path_flat_DEPRECATED_BY_cairo_copy_path_flat
</MACRO>
<MACRO>
<NAME>cairo_get_path</NAME>
#define cairo_get_path		     cairo_get_path_DEPRECATED_BY_cairo_copy_path
</MACRO>
<MACRO>
<NAME>cairo_get_path_flat</NAME>
#define cairo_get_path_flat	     cairo_get_path_flat_DEPRECATED_BY_cairo_get_path_flat
</MACRO>
<MACRO>
<NAME>cairo_set_alpha</NAME>
#define cairo_set_alpha		     cairo_set_alpha_DEPRECATED_BY_cairo_set_source_rgba_OR_cairo_paint_with_alpha
</MACRO>
<MACRO>
<NAME>cairo_show_surface</NAME>
#define cairo_show_surface	     cairo_show_surface_DEPRECATED_BY_cairo_set_source_surface_AND_cairo_paint
</MACRO>
<MACRO>
<NAME>cairo_copy</NAME>
#define cairo_copy		     cairo_copy_DEPRECATED_BY_cairo_create_AND_MANY_INDIVIDUAL_FUNCTIONS
</MACRO>
<MACRO>
<NAME>cairo_surface_set_repeat</NAME>
#define cairo_surface_set_repeat	cairo_surface_set_repeat_DEPRECATED_BY_cairo_pattern_set_extend
</MACRO>
<MACRO>
<NAME>cairo_surface_set_matrix</NAME>
#define cairo_surface_set_matrix	cairo_surface_set_matrix_DEPRECATED_BY_cairo_pattern_set_matrix
</MACRO>
<MACRO>
<NAME>cairo_surface_get_matrix</NAME>
#define cairo_surface_get_matrix	cairo_surface_get_matrix_DEPRECATED_BY_cairo_pattern_get_matrix
</MACRO>
<MACRO>
<NAME>cairo_surface_set_filter</NAME>
#define cairo_surface_set_filter	cairo_surface_set_filter_DEPRECATED_BY_cairo_pattern_set_filter
</MACRO>
<MACRO>
<NAME>cairo_surface_get_filter</NAME>
#define cairo_surface_get_filter	cairo_surface_get_filter_DEPRECATED_BY_cairo_pattern_get_filter
</MACRO>
<MACRO>
<NAME>cairo_matrix_create</NAME>
#define cairo_matrix_create		cairo_matrix_create_DEPRECATED_BY_cairo_matrix_t
</MACRO>
<MACRO>
<NAME>cairo_matrix_destroy</NAME>
#define cairo_matrix_destroy		cairo_matrix_destroy_DEPRECATED_BY_cairo_matrix_t
</MACRO>
<MACRO>
<NAME>cairo_matrix_copy</NAME>
#define cairo_matrix_copy		cairo_matrix_copy_DEPRECATED_BY_cairo_matrix_t
</MACRO>
<MACRO>
<NAME>cairo_matrix_get_affine</NAME>
#define cairo_matrix_get_affine		cairo_matrix_get_affine_DEPRECATED_BY_cairo_matrix_t
</MACRO>
<MACRO>
<NAME>cairo_set_target_surface</NAME>
#define cairo_set_target_surface	cairo_set_target_surface_DEPRECATED_BY_cairo_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_glitz</NAME>
#define cairo_set_target_glitz		cairo_set_target_glitz_DEPRECATED_BY_cairo_glitz_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_image</NAME>
#define cairo_set_target_image		cairo_set_target_image_DEPRECATED_BY_cairo_image_surface_create_for_data
</MACRO>
<MACRO>
<NAME>cairo_set_target_pdf</NAME>
#define cairo_set_target_pdf		cairo_set_target_pdf_DEPRECATED_BY_cairo_pdf_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_png</NAME>
#define cairo_set_target_png		cairo_set_target_png_DEPRECATED_BY_cairo_surface_write_to_png
</MACRO>
<MACRO>
<NAME>cairo_set_target_ps</NAME>
#define cairo_set_target_ps		cairo_set_target_ps_DEPRECATED_BY_cairo_ps_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_quartz</NAME>
#define cairo_set_target_quartz		cairo_set_target_quartz_DEPRECATED_BY_cairo_quartz_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_win32</NAME>
#define cairo_set_target_win32		cairo_set_target_win32_DEPRECATED_BY_cairo_win32_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_xcb</NAME>
#define cairo_set_target_xcb		cairo_set_target_xcb_DEPRECATED_BY_cairo_xcb_surface_create
</MACRO>
<MACRO>
<NAME>cairo_set_target_drawable</NAME>
#define cairo_set_target_drawable	cairo_set_target_drawable_DEPRECATED_BY_cairo_xlib_surface_create
</MACRO>
<MACRO>
<NAME>cairo_get_status_string</NAME>
#define cairo_get_status_string		cairo_get_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string
</MACRO>
<MACRO>
<NAME>cairo_status_string</NAME>
#define cairo_status_string		cairo_status_string_DEPRECATED_BY_cairo_status_AND_cairo_status_to_string
</MACRO>

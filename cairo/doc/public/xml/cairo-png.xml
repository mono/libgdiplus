<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="cairo-PNG-Backend">
<refmeta>
<refentrytitle>PNG Backend</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CAIRO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>PNG Backend</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="cairo-surface-t">cairo_surface_t</link>* <link linkend="cairo-image-surface-create-from-png">cairo_image_surface_create_from_png</link>
                                            (const <link linkend="char">char</link> *filename);
<link linkend="cairo-surface-t">cairo_surface_t</link>* <link linkend="cairo-image-surface-create-from-png-stream">cairo_image_surface_create_from_png_stream</link>
                                            (<link linkend="cairo-read-func-t">cairo_read_func_t</link> read_func,
                                             <link linkend="void">void</link> *closure);
<link linkend="cairo-status-t">cairo_status_t</link> <link linkend="cairo-surface-write-to-png">cairo_surface_write_to_png</link>   (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                             const <link linkend="char">char</link> *filename);
<link linkend="cairo-status-t">cairo_status_t</link> <link linkend="cairo-surface-write-to-png-stream">cairo_surface_write_to_png_stream</link>
                                            (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                             <link linkend="cairo-write-func-t">cairo_write_func_t</link> write_func,
                                             <link linkend="void">void</link> *closure);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="cairo-image-surface-create-from-png"/>cairo_image_surface_create_from_png ()</title>
<indexterm><primary>cairo_image_surface_create_from_png</primary></indexterm><programlisting><link linkend="cairo-surface-t">cairo_surface_t</link>* cairo_image_surface_create_from_png
                                            (const <link linkend="char">char</link> *filename);</programlisting>
<para>
Creates a new image surface and initializes the contents to the
given PNG file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> name of PNG file to load 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> initialized with the contents
of the PNG file, or a "nil" surface if any error occurred. A nil
surface can be checked for with cairo_surface_status(surface) which
may return one of the following values: 

CAIRO_STATUS_NO_MEMORY
CAIRO_STATUS_FILE_NOT_FOUND
CAIRO_STATUS_READ_ERROR
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-image-surface-create-from-png-stream"/>cairo_image_surface_create_from_png_stream ()</title>
<indexterm><primary>cairo_image_surface_create_from_png_stream</primary></indexterm><programlisting><link linkend="cairo-surface-t">cairo_surface_t</link>* cairo_image_surface_create_from_png_stream
                                            (<link linkend="cairo-read-func-t">cairo_read_func_t</link> read_func,
                                             <link linkend="void">void</link> *closure);</programlisting>
<para>
Creates a new image surface from PNG data read incrementally
via the <parameter>read_func</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>read_func</parameter>&nbsp;:</term>
<listitem><simpara> function called to read the data of the file
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&nbsp;:</term>
<listitem><simpara> data to pass to <parameter>read_func</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> initialized with the contents
of the PNG file or <literal>NULL</literal> if the data read is not a valid PNG image or
memory could not be allocated for the operation.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-surface-write-to-png"/>cairo_surface_write_to_png ()</title>
<indexterm><primary>cairo_surface_write_to_png</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link> cairo_surface_write_to_png   (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                             const <link linkend="char">char</link> *filename);</programlisting>
<para>
Writes the contents of <parameter>surface</parameter> to a new file <parameter>filename</parameter> as a PNG
image.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>surface</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> with pixel contents
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> the name of a file to write to
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> CAIRO_STATUS_SUCCESS if the PNG file was written
successfully. Otherwise, CAIRO_STATUS_NO_MEMORY if memory could not
be allocated for the operation or
CAIRO_STATUS_SURFACE_TYPE_MISMATCH if the surface does not have
pixel contents, or CAIRO_STATUS_WRITE_ERROR if an I/O error occurs
while attempting to write the file.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-surface-write-to-png-stream"/>cairo_surface_write_to_png_stream ()</title>
<indexterm><primary>cairo_surface_write_to_png_stream</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link> cairo_surface_write_to_png_stream
                                            (<link linkend="cairo-surface-t">cairo_surface_t</link> *surface,
                                             <link linkend="cairo-write-func-t">cairo_write_func_t</link> write_func,
                                             <link linkend="void">void</link> *closure);</programlisting>
<para>
Writes the image surface to the write function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>surface</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="cairo-surface-t"><type>cairo_surface_t</type></link> with pixel contents
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>write_func</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="cairo-write-func-t"><type>cairo_write_func_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>closure</parameter>&nbsp;:</term>
<listitem><simpara> closure data for the write function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> CAIRO_STATUS_SUCCESS if the PNG file was written
successfully.  Otherwise, CAIRO_STATUS_NO_MEMORY is returned if
memory could not be allocated for the operation,
CAIRO_STATUS_SURFACE_TYPE_MISMATCH if the surface does not have
pixel contents.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>

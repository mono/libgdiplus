<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="cairo-cairo-matrix-t">
<refmeta>
<refentrytitle>cairo_matrix_t</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>CAIRO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>cairo_matrix_t</refname><refpurpose>
  Transformation matrices</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



            <link linkend="cairo-matrix-t">cairo_matrix_t</link>;
<link linkend="void">void</link>        <link linkend="cairo-matrix-init">cairo_matrix_init</link>               (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> xx,
                                             <link linkend="double">double</link> yx,
                                             <link linkend="double">double</link> xy,
                                             <link linkend="double">double</link> yy,
                                             <link linkend="double">double</link> x0,
                                             <link linkend="double">double</link> y0);
<link linkend="void">void</link>        <link linkend="cairo-matrix-init-identity">cairo_matrix_init_identity</link>      (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);
<link linkend="void">void</link>        <link linkend="cairo-matrix-init-translate">cairo_matrix_init_translate</link>     (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> tx,
                                             <link linkend="double">double</link> ty);
<link linkend="void">void</link>        <link linkend="cairo-matrix-init-scale">cairo_matrix_init_scale</link>         (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> sx,
                                             <link linkend="double">double</link> sy);
<link linkend="void">void</link>        <link linkend="cairo-matrix-init-rotate">cairo_matrix_init_rotate</link>        (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> radians);
<link linkend="void">void</link>        <link linkend="cairo-matrix-translate">cairo_matrix_translate</link>          (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> tx,
                                             <link linkend="double">double</link> ty);
<link linkend="void">void</link>        <link linkend="cairo-matrix-scale">cairo_matrix_scale</link>              (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> sx,
                                             <link linkend="double">double</link> sy);
<link linkend="void">void</link>        <link linkend="cairo-matrix-rotate">cairo_matrix_rotate</link>             (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> radians);
<link linkend="cairo-status-t">cairo_status_t</link> <link linkend="cairo-matrix-invert">cairo_matrix_invert</link>          (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);
<link linkend="void">void</link>        <link linkend="cairo-matrix-multiply">cairo_matrix_multiply</link>           (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *result,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *a,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *b);
<link linkend="void">void</link>        <link linkend="cairo-matrix-transform-distance">cairo_matrix_transform_distance</link> (const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> *dx,
                                             <link linkend="double">double</link> *dy);
<link linkend="void">void</link>        <link linkend="cairo-matrix-transform-point">cairo_matrix_transform_point</link>    (const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> *x,
                                             <link linkend="double">double</link> *y);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>

  <para><indexterm><primary>types</primary><secondary>cairo_matrix</secondary></indexterm><indexterm><primary/></indexterm>
    <structname>cairo_matrix_t</structname> is used throughout
    Cairo to represents between different coordinates spaces.
    A <structname>cairo_matrix</structname> holds an affine
    transformation, such as a scale, rotation, or shear, or a
    combination of those. Mathematically, the effect of an affine
    transformation on a point (<literal>x</literal>,<literal>y</literal>) is given by:
  </para>
  <programlisting>
    x_new = x * a + y * c + tx;
    y_new = x * b + y * d + ty;
  </programlisting>
  <para>
    The parameters <literal>a</literal>, <literal>b</literal>,
    <literal>c</literal>, <literal>d</literal>, <literal>tx</literal>,
    <literal>ty</literal> can be retrieved with
    <link linkend="cairo-matrix-get-affine"><function>cairo_matrix_get_affine()</function></link> and set with <link linkend="cairo-matrix-get-affine"><function>cairo_matrix_get_affine()</function></link>.
  </para>
  <para>
    The primary use of transformation matrices in Cairo is as the
    current transformation matrix in a <link linkend="cairo-t"><type>cairo_t</type></link>. The current
    transformation matrix gives the transformation from user space
    coordinates to device coordinates. See <link linkend="cairo-set-matrix"><function>cairo_set_matrix()</function></link>,
    <link linkend="cairo-current-matrix"><function>cairo_current_matrix()</function></link>.
  </para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="cairo-matrix-t"/>cairo_matrix_t</title>
<indexterm><primary>cairo_matrix_t</primary></indexterm><programlisting>typedef struct {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
</programlisting>
<para>
A <link linkend="cairo-matrix-t"><type>cairo_matrix_t</type></link> holds an affine transformation, such as a scale,
rotation, or shear, or a combination of those. The transformation is given
by:
<programlisting>
 x_new = xx * x + xy * y + x0;
 y_new = yx * x + yy * y + y0;
</programlisting></para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>xx</structfield>;</term>
<listitem><simpara> xx component of the affine transformation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>yx</structfield>;</term>
<listitem><simpara> yx component of the affine transformation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>xy</structfield>;</term>
<listitem><simpara> xy component of the affine transformation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>yy</structfield>;</term>
<listitem><simpara> yy component of the affine transformation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>x0</structfield>;</term>
<listitem><simpara> X translation component of the affine transformation
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="double">double</link>&nbsp;<structfield>y0</structfield>;</term>
<listitem><simpara> Y translation component of the affine transformation
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-init"/>cairo_matrix_init ()</title>
<indexterm><primary>cairo_matrix_init</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_init               (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> xx,
                                             <link linkend="double">double</link> yx,
                                             <link linkend="double">double</link> xy,
                                             <link linkend="double">double</link> yy,
                                             <link linkend="double">double</link> x0,
                                             <link linkend="double">double</link> y0);</programlisting>
<para>
Sets <parameter>matrix</parameter> to be the affine transformation given by
<parameter>xx</parameter>, <parameter>yx</parameter>, <parameter>xy</parameter>, <parameter>yy</parameter>, <parameter>x0</parameter>, <parameter>y0</parameter>. The transformation is given
by:
<programlisting>
 x_new = xx * x + xy * y + x0;
 y_new = yx * x + yy * y + y0;
</programlisting></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a cairo_matrix_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xx</parameter>&nbsp;:</term>
<listitem><simpara> xx component of the affine transformation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yx</parameter>&nbsp;:</term>
<listitem><simpara> yx component of the affine transformation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>xy</parameter>&nbsp;:</term>
<listitem><simpara> xy component of the affine transformation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>yy</parameter>&nbsp;:</term>
<listitem><simpara> yy component of the affine transformation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x0</parameter>&nbsp;:</term>
<listitem><simpara> X translation component of the affine transformation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y0</parameter>&nbsp;:</term>
<listitem><simpara> Y translation component of the affine transformation
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-init-identity"/>cairo_matrix_init_identity ()</title>
<indexterm><primary>cairo_matrix_init_identity</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_init_identity      (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);</programlisting>
<para>
Modifies <parameter>matrix</parameter> to be an identity transformation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="cairo-matrix-t"><type>cairo_matrix_t</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-init-translate"/>cairo_matrix_init_translate ()</title>
<indexterm><primary>cairo_matrix_init_translate</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_init_translate     (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> tx,
                                             <link linkend="double">double</link> ty);</programlisting>
<para>
Initializes <parameter>matrix</parameter> to a transformation that translates by <parameter>tx</parameter> and
<parameter>ty</parameter> in the X and Y dimensions, respectively.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a cairo_matrix_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tx</parameter>&nbsp;:</term>
<listitem><simpara> amount to translate in the X direction
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ty</parameter>&nbsp;:</term>
<listitem><simpara> amount to translate in the Y direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-init-scale"/>cairo_matrix_init_scale ()</title>
<indexterm><primary>cairo_matrix_init_scale</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_init_scale         (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> sx,
                                             <link linkend="double">double</link> sy);</programlisting>
<para>
Initializes <parameter>matrix</parameter> to a transformation that scales by <parameter>sx</parameter> and <parameter>sy</parameter>
in the X and Y dimensions, respectively.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a cairo_matrix_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sx</parameter>&nbsp;:</term>
<listitem><simpara> scale factor in the X direction
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sy</parameter>&nbsp;:</term>
<listitem><simpara> scale factor in the Y direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-init-rotate"/>cairo_matrix_init_rotate ()</title>
<indexterm><primary>cairo_matrix_init_rotate</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_init_rotate        (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> radians);</programlisting>
<para>
Initialized <parameter>matrix</parameter> to a transformation that rotates by <parameter>radians</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a cairo_matrix_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radians</parameter>&nbsp;:</term>
<listitem><simpara> angle of rotation, in radians. The direction of rotation
is defined such that positive angles rotate in the direction from
the positive X axis toward the positive Y axis. With the default
axis orientation of cairo, positive angles rotate in a clockwise
direction.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-translate"/>cairo_matrix_translate ()</title>
<indexterm><primary>cairo_matrix_translate</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_translate          (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> tx,
                                             <link linkend="double">double</link> ty);</programlisting>
<para>
Applies a translation by <parameter>tx</parameter>, <parameter>ty</parameter> to the transformation in
<parameter>matrix</parameter>. The effect of the new transformation is to first translate
the coordinates by <parameter>tx</parameter> and <parameter>ty</parameter>, then apply the original transformation
to the coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a cairo_matrix_t
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tx</parameter>&nbsp;:</term>
<listitem><simpara> amount to translate in the X direction
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ty</parameter>&nbsp;:</term>
<listitem><simpara> amount to translate in the Y direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-scale"/>cairo_matrix_scale ()</title>
<indexterm><primary>cairo_matrix_scale</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_scale              (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> sx,
                                             <link linkend="double">double</link> sy);</programlisting>
<para>
Applies scaling by <parameter>tx</parameter>, <parameter>ty</parameter> to the transformation in <parameter>matrix</parameter>. The
effect of the new transformation is to first scale the coordinates
by <parameter>sx</parameter> and <parameter>sy</parameter>, then apply the original transformation to the coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="cairo-matrix-t"><type>cairo_matrix_t</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sx</parameter>&nbsp;:</term>
<listitem><simpara> scale factor in the X direction
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sy</parameter>&nbsp;:</term>
<listitem><simpara> scale factor in the Y direction
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-rotate"/>cairo_matrix_rotate ()</title>
<indexterm><primary>cairo_matrix_rotate</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_rotate             (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> radians);</programlisting>
<para>
Applies rotation by <parameter>radians</parameter> to the transformation in
<parameter>matrix</parameter>. The effect of the new transformation is to first rotate the
coordinates by <parameter>radians</parameter>, then apply the original transformation
to the coordinates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>radians</parameter>&nbsp;:</term>
<listitem><simpara> angle of rotation, in radians. The direction of rotation
is defined such that positive angles rotate in the direction from
the positive X axis toward the positive Y axis. With the default
axis orientation of cairo, positive angles rotate in a clockwise
direction.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-invert"/>cairo_matrix_invert ()</title>
<indexterm><primary>cairo_matrix_invert</primary></indexterm><programlisting><link linkend="cairo-status-t">cairo_status_t</link> cairo_matrix_invert          (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix);</programlisting>
<para>
Changes <parameter>matrix</parameter> to be the inverse of it's original value. Not
all transformation matrices have inverses; if the matrix
collapses points together (it is <firstterm>degenerate</firstterm>),
then it has no inverse and this function will fail.
</para>
<para>
Returns: If <parameter>matrix</parameter> has an inverse, modifies <parameter>matrix</parameter> to
 be the inverse matrix and returns <literal>CAIRO_STATUS_SUCCESS</literal>. Otherwise,</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara><literal>CAIRO_STATUS_INVALID_MATRIX</literal>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-multiply"/>cairo_matrix_multiply ()</title>
<indexterm><primary>cairo_matrix_multiply</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_multiply           (<link linkend="cairo-matrix-t">cairo_matrix_t</link> *result,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *a,
                                             const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *b);</programlisting>
<para>
Multiplies the affine transformations in <parameter>a</parameter> and <parameter>b</parameter> together
and stores the result in <parameter>result</parameter>. The effect of the resulting
transformation is to first apply the transformation in <parameter>a</parameter> to the
coordinates and then apply the transformation in <parameter>b</parameter> to the
coordinates.
</para>
<para>
It is allowable for <parameter>result</parameter> to be identical to either <parameter>a</parameter> or <parameter>b</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>result</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter> in which to store the result
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-transform-distance"/>cairo_matrix_transform_distance ()</title>
<indexterm><primary>cairo_matrix_transform_distance</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_transform_distance (const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> *dx,
                                             <link linkend="double">double</link> *dy);</programlisting>
<para>
Transforms the distance vector (<parameter>dx</parameter>,<parameter>dy</parameter>) by <parameter>matrix</parameter>. This is
similar to <link linkend="cairo-matrix-transform"><function>cairo_matrix_transform()</function></link> except that the translation
components of the transformation are ignored. The calculation of
the returned vector is as follows:
</para>
<para>
<programlisting>
dx2 = dx1 * a + dy1 * c;
dy2 = dx1 * b + dy1 * d;
</programlisting>
</para>
<para>
Affine transformations are position invariant, so the same vector
always transforms to the same vector. If (<parameter>x1</parameter>,<parameter>y1</parameter>) transforms
to (<parameter>x2</parameter>,<parameter>y2</parameter>) then (<parameter>x1</parameter>+<parameter>dx1</parameter>,<parameter>y1</parameter>+<parameter>dy1</parameter>) will transform to
(<parameter>x1</parameter>+<parameter>dx2</parameter>,<parameter>y1</parameter>+<parameter>dy2</parameter>) for all values of <parameter>x1</parameter> and <parameter>x2</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dx</parameter>&nbsp;:</term>
<listitem><simpara> X component of a distance vector. An in/out parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dy</parameter>&nbsp;:</term>
<listitem><simpara> Y component of a distance vector. An in/out parameter
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="cairo-matrix-transform-point"/>cairo_matrix_transform_point ()</title>
<indexterm><primary>cairo_matrix_transform_point</primary></indexterm><programlisting><link linkend="void">void</link>        cairo_matrix_transform_point    (const <link linkend="cairo-matrix-t">cairo_matrix_t</link> *matrix,
                                             <link linkend="double">double</link> *x,
                                             <link linkend="double">double</link> *y);</programlisting>
<para>
Transforms the point (<parameter>x</parameter>, <parameter>y</parameter>) by <parameter>matrix</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>matrix</parameter>&nbsp;:</term>
<listitem><simpara> a <parameter>cairo_matrix_t</parameter>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x</parameter>&nbsp;:</term>
<listitem><simpara> X position. An in/out parameter
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y</parameter>&nbsp;:</term>
<listitem><simpara> Y position. An in/out parameter
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
